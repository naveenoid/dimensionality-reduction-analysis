%% Script to test trajectories in Fourier Basis System
%Script to train a simple trajectory on the tethered Mass system

% Step1 setup robot
% Step2 setup fourierbasis system
% Step3 Train simple noninverse trajectory
% Step4 Test behaviour
% Step5 Plot trajectory results

% Robot setup
mechOpt = init2DSpringyDampedMass(2);%robotData();
mechOpt.initialCond = zeros(size(mechOpt.A,1),1);
xi = mechOpt.initialCond;
tspan = [0;5];%[0:0.001:10];%train.tspan;
mechSystem = @sysLTIForced;
mechOpt.inputDim = size(mechOpt.B,2);
mechOpt.stateDim = size(mechOpt.A,1);
mechOpt.outputDim = size(mechOpt.C,1);
mechOpt.outputs = [1,2];

%cm = 1.75;
redThreshold = 0.995;
mechDirectSystem = @(t,x,u)mechSystem(t,x,u,mechOpt);

%FourierBasis setup;
basisFunc = @fourierBasis;
basisLearning = @fourierBasisWeightLearning;
basisOpt.fourierOrder = 5;%12;  %a number between 3 and 8

%xDes = [0.3520   -0.7181]';%[0.2, -0.75]';%[0.5,-0.4]';
%xDes = [0.4 -0.6]';

%xDes = [0.5, -0.3]';
xDes = [0.5,0.5]';
%xDes = [0.5 -0.5]';
%fprintf('xDes\n');
%disp(xDes);

FSteady = computeSteadyStateForce(xDes,mechOpt);

%tauSteady  = computeSteadyStateTorque(iKin(xDes','up',mechOpt)', mechOpt);
fprintf('F Computed : '); FSteady'
fprintf('\n');

% tauSteady = computeSteadyStateTorque(iKin(xDes','down',mechOpt)', mechOpt);
% fprintf('Tau Computed down : '); tauSteady'
% fprintf('\n');

%tauSteady = [1;1];%computeSteadyStateTorque(iKin(xDes','down',mechOpt)', mechOpt);
%fprintf('Tau Actual : '); tauSteady'
%fprintf('\n');

%trainingFunc = @(tTrain)( 1.0*(1 + tanh(tTrain-max(tTrain)*0.5)));
%trainingFunc = @(tTrain)( [FSteady(1)*ones(1,length(tTrain)) ;(FSteady(2)*((1 + tanh(tTrain-0.5*max(tTrain)))))']);
trainingFunc = @(tTrain)( FSteady*ones(1,length(tTrain)));
%trainingFunc = @(tTrain)( tauSteady*(1 + tanh(tTrain-max(tTrain)*0.5))')
%trainingFunc{2} = @(tTrain)( 0.0*(1 + tanh(tTrain-max(tTrain)*0.5)));
%trainingFunc{3} = @(tTrain)( 1.0*(1 + tanh(tTrain-max(tTrain)*0.5)));
%trainingFunc{2} = @(tTrain)( sin(pi*(tTrain./(0.5*max(tTrain)))));%@(tTrain)( cos(pi*(tTrain./(max(tTrain)))));
%trainingFunc{3} = @(tTrain)( sin(pi*(tTrain./(max(tTrain)))));

trajectoryName = {'reachStep', 'intrinsic'};

result= struct();
tTrain =(tspan(1):0.1:tspan(2))';

xD = zeros(2,length(tTrain));

 %   tic;
fprintf('Learning Training Trajectory\n');
    % trainingData 

xD = trainingFunc(tTrain);    
%xD(2,:) = trainingFunc{train}(tTrain);%0.5*(1 + tanh(tTrain-max(tTrain)*0.5));
%xD(1,:) = trainingFunc{1}(tTrain);
result.xD = xD;
%( t, xD, xDdot, fInvMech, fBasis, mechOpt,basisOpt )
[WHat,basisOpt] = basisLearning(tTrain,xD,[],[],basisFunc,mechOpt,basisOpt)
mechBasisSystem = @(t,x,u)mechSystem(t,x,WHat*u,mechOpt); 

mechBasisOpt = mechOpt;
mechBasisOpt.inputDim = basisOpt.order;
%uFunc = @(t)WHat*basisFunc(t,basisOpt);

fprintf('Num of basis funcs : %d\n',basisOpt.order );


sys = @(t,x)mechBasisSystem(t,x,basisFunc(t,basisOpt));

%vopt = odeset ('InitialStep',1e-10,'MaxStep',1e-5);
%vopt = odeset('InitialStep',1e-10,'MaxStep',1e-4, 'AbsTol',1, 'RelTol',1);
vopt = odeset('AbsTol',1e-1, 'RelTol',5e-2);
%
tspanFull = linspace(tspan(1),tspan(2),500);
fprintf('Simulating time for simple step input ');

tic;
[t, x] = ode15s(sys,tspanFull,xi,vopt);
toc

result.WHat = WHat;
result.t = t;
result.x = x;

%fk = fkin(x(end,1),x(end,2),mechOpt);
fprintf('Original Des Pos : '); xDes'
fprintf('\n');
fprintf('Position Reached : '); mechOpt.C*x(end,:)' %fk(3:4)
fprintf('\n');

fprintf('Empirical Reduction of Trajectory\n');
drawnow;

%% Checking dimensionality using empirical gramians
fprintf('Dim checking time : \n');
tic;
%[ score, redOrder, redSys, hsv , normHsv] =  evaluateDimCost_NBT(WHat,tspan,mechSystem, mechOpt, basisOpt, redThreshold, cm);
%[ score, redOrder, redSys, hsv , normHsv] =  evaluateDimCost_NBT(WHat,tspan,mechSystem, mechOpt, basisOpt, redThreshold, cm);
[score, redOrder , redSys, hsv, normHsv ] = evaluateDimCost_BT(WHat,mechOpt,basisOpt,redThreshold,[],[],[],1);
toc

score

result.hsv = hsv;
result.score = score;
result.normHsv = normHsv;
result.redOrder = redOrder;
result.threshold = redThreshold;
result.redSys = redSys;


fprintf('\nTesting Pure Mechanical System dimensionality\n');

%% testing pure mech system 
tempOpt.order = mechOpt.inputDim-1;
%[ score, redOrder, redSys, hsv, normHsv ] =  evaluateDimCost_NBT(ones(mechOpt.inputDim),tspan,mechSystem, mechOpt, tempOpt, redThreshold, cm);
[score, redOrder , redSys, hsv, normHsv ] = evaluateDimCost_BT(ones(mechOpt.inputDim),mechOpt,tempOpt,redThreshold,[],[],[],1);

score
resultMech.score = score;
resultMech.hsv = hsv;
resultMech.normHsv = hsv;
resultMech.redOrder  = redOrder;
resultMech.redSys = redSys;

cols = {'r','b','g','k'};

redOrderList = zeros(size(result,2),1);
redScoreList = zeros(size(result,2),1);

figure(1);
subplot(2,1,1);
plot(result.t,result.x(:,1:2),cols{1}); hold on;
ylabel('Position');
xlabel('time t(secs)');
legend('q_1','q_2');

resPos = mechOpt.C*x';
% 
subplot(2,1,2);
%title('inputs computed by polybasis');
plot(result.t,result.WHat*basisFunc(result.t,basisOpt),cols{1});hold on;%, tTrain,result(train).xD,'k'); hold on;

figure(2);
%trajectoryTrace_snapshot(fkin(result.x(:,1),result.x(:,2),robotData()),result.t,robotData(),2,0);hold on;
plot(resPos(1,:),resPos(2,:),'r:'); hold on;
plot(resPos(1,end),resPos(2,end),'bo');
figure(3);
plot(1:mechOpt.stateDim,cumsum(result.hsv)./sum(result.hsv),strcat(cols{1},'-o'),1:mechOpt.stateDim,cumsum(resultMech.hsv)./sum(resultMech.hsv),strcat(cols{2},'-o')); hold on;
plot(cumsum(ones(4,1)),redThreshold*ones(4,1));
axis tight;
title('Hankel Singular Values');
xlabel('State');
ylabel('Normalised HSV');

redOrderList = [result.redOrder, resultMech.redOrder];
redScoreList = [result.score, resultMech.score];

figure(1); %legend(trajectoryName{1:end});
figure(2); %legend(trajectoryName{1:end});
figure(3); legend(trajectoryName{1:end});

fprintf('Testing Constraint Violation \n');
tic;
%[ c,ceq ] = reachConstraint( result.WHat, xDes, tspan,mechSystem, mechOpt,basisFunc,basisOpt)
%[ c,ceq ] = reachConstraint( result.What, mechOpt.initialCond,xDes,tspan, basisFunc,basisOpt, basisSys, mode )
 [ c,ceq ] = reachConstraint( result.WHat, xDes,mechSystem,mechOpt,tspan, basisFunc,basisOpt );
toc

%cartPos=fkin(result.x(:,1),result.x(:,2),robotData());
%fprintf('End Pos : ');
%cartPos(end,3:4);

%cartVel=diff(cartPos);



%fprintf('End Vel : ');
%cartVel(end,3:4)
%disp(c);
% 
% figure(4);
% bar(1:length(trainingFunc)+1, redOrderList);
% %legend(trajectoryName{1:end});
% xlabel('Trajectories');
% ylabel('Reduced Dimensionality');

%disp(redScoreList);
%disp(redOrderList);

%set(gca,'Xtick',1:length(trainingFunc)+1,'XTickLabel',trajectoryName)
